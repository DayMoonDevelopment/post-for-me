name: CD

on:
  push:
    branches:
      - main

concurrency:
  group: cd-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy Full App
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      SLACK_CHANNEL: "#notifications-postforme"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Notify Slack - Start
        run: ./.github/scripts/update_status.sh üîÑ üîÑ üîÑ üîÑ üîÑ üîÑ üîÑ
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install

      - name: Lint
        id: lint
        run: bun run lint

      - name: Type check
        id: typecheck
        run: bun run typecheck

      - name: Set up Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link Supabase project
        run: supabase link --project-ref $SUPABASE_PROJECT_ID

      - name: Apply Supabase migrations
        id: supabase
        run: supabase db push

      - name: üöÄ Deploy Trigger.dev
        id: trigger
        env:
          TRIGGER_ACCESS_TOKEN: ${{ secrets.TRIGGER_ACCESS_TOKEN }}
          TRIGGER_PROJECT_ID: ${{ secrets.TRIGGER_PROJECT_ID }}
        run: bunx trigger.dev@4.0.0-v4-beta.27 deploy

      - name: Install Render CLI
        run: |
          curl -L https://github.com/render-oss/cli/releases/download/v1.1.0/cli_1.1.0_linux_amd64.zip -o render.zip
          unzip -o render.zip
          sudo mv cli_v1.1.0 /usr/local/bin/render

      - name: Deploy API
        id: api
        env:
          # The CLI can authenticate via a Render API key without logging in.
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          CI: true
        run: |
          render deploys create ${{ secrets.RENDER_SERVICE_ID }} --output json --wait --confirm


      - name: Link Dashboard to Vercel Project
        run: bunx vercel link --project post-for-me-app --scope day-moon --token=${{ secrets.VERCEL_TOKEN }} --yes

      - name: Deploy Dashboard
        id: dashboard
        run: bunx vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
        continue-on-error: true

      - name: Link Marketing to Vercel Project
        run: bunx vercel link --project post-for-me-marketing --scope day-moon --token=${{ secrets.VERCEL_TOKEN }} --yes

      - name: Deploy Marketing
        id: marketing
        run: bunx vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
        continue-on-error: true

      - name: Update Slack - Final Status
        if: always()
        run: |
          LINT_STATUS="${{ steps.lint.outcome == 'success' && '‚úÖ' || '‚ùå' }}"
          TYPECHECK_STATUS="${{ steps.typecheck.outcome == 'success' && '‚úÖ' || (steps.typecheck.outcome == 'skipped' && '‚è∏Ô∏è' || '‚ùå') }}"
          SUPABASE_STATUS="${{ steps.supabase.outcome == 'success' && 'üöÄ' || (steps.supabase.outcome == 'skipped' && '‚è∏Ô∏è' || '‚ùå') }}"
          TRIGGER_STATUS="${{ steps.trigger.outcome == 'success' && 'üöÄ' || (steps.trigger.outcome == 'skipped' && '‚è∏Ô∏è' || '‚ùå') }}"
          API_STATUS="${{ steps.api.outcome == 'success' && 'üöÄ' || (steps.api.outcome == 'skipped' && '‚è∏Ô∏è' || '‚ùå') }}"
          DASHBOARD_STATUS="${{ steps.dashboard.outcome == 'success' && 'üöÄ' || (steps.dashboard.outcome == 'skipped' && '‚è∏Ô∏è' || '‚ùå') }}"
          MARKETING_STATUS="${{ steps.marketing.outcome == 'success' && 'üöÄ' || (steps.marketing.outcome == 'skipped' && '‚è∏Ô∏è' || '‚ùå') }}"

          ./.github/scripts/update_status.sh "$LINT_STATUS" "$TYPECHECK_STATUS" "$SUPABASE_STATUS" "$TRIGGER_STATUS" "$API_STATUS" "$DASHBOARD_STATUS" "$MARKETING_STATUS"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL }}
