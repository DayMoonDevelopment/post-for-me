import {
  AlertCircleIcon,
  FileTextIcon,
  UploadIcon,
  XIcon,
  CheckIcon,
  LoaderIcon,
} from "lucide-react";
import { useFetcher, useLoaderData } from "react-router";
import { useEffect, useState } from "react";
import { CircleInfoIcon } from "icons/";

import { useFileUpload } from "~/hooks/use-file-upload";
import { useForm } from "~/hooks/use-form";

import { Button } from "~/ui/button";
import { Tooltip, TooltipTrigger, TooltipContent } from "~/ui/tooltip";
import type { Route } from "./+types/route";

interface UploadedFile {
  id: string;
  name: string;
  status: "uploading" | "uploaded" | "error" | "idle";
  error?: string;
}

export function VerificationFiles() {
  const { verificationFiles } =
    useLoaderData<Route.ComponentProps["loaderData"]>();
  const maxSize = 10 * 1024 * 1024; // 10MB default
  const maxFiles = 10;
  const deleteFetcher = useFetcher();
  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>(
    verificationFiles?.map((file) => ({
      id: file.name ?? "",
      name: file.name ?? "",
      status: "idle",
    })) || [],
  );

  const { fetcher: submitFetcher } = useForm();

  const [{ files, errors }, { openFileDialog, removeFile, getInputProps }] =
    useFileUpload({
      multiple: true,
      maxFiles,
      maxSize,
      accept: ".txt,text/plain",
      initialFiles: verificationFiles?.map((file) => ({
        id: file.name ?? "",
        name: file.name ?? "",
        size: 0,
        type: "text/plain",
        url: "",
        file: { name: file.name ?? "" },
      })),
      onFilesAdded: (addedFiles) => {
        const newUploadedFiles = addedFiles.map((file) => ({
          id: file.id,
          name: file.file instanceof File ? file.file.name : file.file.name,
          status: "uploading" as const,
        }));

        setUploadedFiles((prev) => [...prev, ...newUploadedFiles]);

        addedFiles.forEach((file) => {
          const formData = new FormData();
          formData.append(
            "tiktok_verification_files",
            file.file instanceof File
              ? file.file
              : new Blob([file.file.name], { type: "text/plain" }),
          );

          submitFetcher.submit(formData, {
            method: "POST",
            action: `upload-files`,
            encType: "multipart/form-data",
          });
        });
      },
      onFilesChange: (updatedFiles) => {
        console.log("Files changed:", updatedFiles);
      },
    });

  useEffect(() => {
    if (submitFetcher.state === "idle" && submitFetcher.data) {
      const response = submitFetcher.data as {
        success: boolean;
        toast_msg: string;
        fileName?: string;
      };

      if (response.success) {
        setUploadedFiles((prev) =>
          prev.map((file) =>
            file.status === "uploading"
              ? { ...file, status: "uploaded" as const }
              : file,
          ),
        );
      } else {
        setUploadedFiles((prev) =>
          prev.map((file) =>
            file.status === "uploading"
              ? { ...file, status: "error" as const, error: response.toast_msg }
              : file,
          ),
        );
      }
    }
  }, [submitFetcher.state, submitFetcher.data]);

  const handleRemoveFile = async (fileId: string) => {
    const fileToRemove = uploadedFiles.find((f) => f.id === fileId);

    if (fileToRemove && ["uploaded", "idle"].includes(fileToRemove.status)) {
      const formData = new FormData();
      formData.append("fileName", fileToRemove.name);

      deleteFetcher.submit(formData, {
        method: "DELETE",
        action: `upload-files`,
      });
    }

    removeFile(fileId);
    setUploadedFiles((prev) => prev.filter((f) => f.id !== fileId));
  };

  const getFileStatus = (fileId: string) => {
    return uploadedFiles.find((f) => f.id === fileId);
  };

  const isDeleting = deleteFetcher.state === "submitting";
  const isUploading = submitFetcher.state !== "idle";
  const hasFiles = files.length > 0;

  return (
    <div className="space-y-4">
      <div className="inline-flex items-center justify-between w-full">
        <div className="flex items-center gap-2">
          <h3 className="font-medium font-sm">Validation Files</h3>
          {hasFiles ? (
            <Tooltip>
              <TooltipTrigger asChild>
                <CircleInfoIcon className="size-4 text-muted-foreground" />
              </TooltipTrigger>
              <TooltipContent>
                Upload file(s) generated by TikTok after adding the URL
                Properties (above) to your TikTok app. Leave the file names
                exactly as they are provided by TikTok.
              </TooltipContent>
            </Tooltip>
          ) : null}
        </div>

        <div className="relative">
          <input
            {...getInputProps()}
            name="verification_files"
            className="sr-only"
            aria-label="Upload text files"
            accept=".txt,text/plain"
          />

          <Button
            type="button"
            variant="outline"
            size="xs"
            onClick={openFileDialog}
            disabled={files.length >= maxFiles || isUploading}
            className="gap-2"
          >
            <UploadIcon />
            Choose .txt files
          </Button>
        </div>
      </div>

      {!hasFiles ? (
        <p className="text-muted-foreground text-sm">
          Upload file(s) generated by TikTok after adding the URL Properties
          (above) to your TikTok app. Leave the file names exactly as they are
          provided by TikTok.
        </p>
      ) : null}

      <div className="flex flex-col gap-2">
        {errors.length > 0 ? (
          <div
            className="text-destructive flex items-center gap-1 text-xs"
            role="alert"
          >
            <AlertCircleIcon className="size-3 shrink-0" />
            <span>{errors[0]}</span>
          </div>
        ) : null}

        {files.length > 0 ? (
          <div className="space-y-2">
            {files.map((file) => {
              const fileStatus = getFileStatus(file.id);
              const fileName =
                file.file instanceof File ? file.file.name : file.file.name;

              return (
                <div
                  key={file.id}
                  className="bg-card flex items-center justify-between gap-2 rounded-lg border py-1 px-3"
                >
                  <div className="flex items-center gap-3 overflow-hidden">
                    <div className="flex items-center gap-2">
                      {fileStatus?.status === "idle" ? (
                        <FileTextIcon className="size-3 opacity-60" />
                      ) : null}
                      {fileStatus?.status === "uploading" ? (
                        <LoaderIcon className="size-3 animate-spin text-accent-foreground" />
                      ) : null}
                      {fileStatus?.status === "uploaded" ? (
                        <CheckIcon className="size-3 text-affirmative" />
                      ) : null}
                      {fileStatus?.status === "error" ? (
                        <AlertCircleIcon className="size-3 text-destructive" />
                      ) : null}
                    </div>
                    <div className="flex min-w-0 flex-col gap-0.5">
                      {fileStatus?.status === "error" ? (
                        <p className="text-xs text-destructive">
                          {fileStatus.error || "Upload failed"}
                        </p>
                      ) : (
                        <p className="truncate text-[13px] font-medium">
                          {fileName}
                        </p>
                      )}

                      {fileStatus?.status === "uploading" ? (
                        <p className="text-xs text-accent-foreground">
                          Uploading...
                        </p>
                      ) : null}
                      {fileStatus?.status === "uploaded" ? (
                        <p className="text-xs text-affirmative">Uploaded</p>
                      ) : null}
                    </div>
                  </div>
                  <Button
                    size="icon"
                    variant="ghost"
                    className="text-muted-foreground/80 hover:text-foreground -me-2 size-8 hover:bg-transparent p-0"
                    onClick={() => handleRemoveFile(file.id)}
                    disabled={fileStatus?.status === "uploading" || isDeleting}
                    aria-label="Remove file"
                  >
                    {isDeleting ? (
                      <LoaderIcon className="size-4 animate-spin" />
                    ) : (
                      <XIcon className="size-4" aria-hidden="true" />
                    )}
                  </Button>
                </div>
              );
            })}
          </div>
        ) : null}
      </div>
    </div>
  );
}
